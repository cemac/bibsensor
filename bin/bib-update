#!/usr/bin/python3
# -*- coding: utf-8 -*-

"""
Download and run updates.

The program expects one argument - the location of the config file, e.g.:

  bib-update /etc/bibsensor/bibsensor.conf
"""

# Standard library imports:
try:
    import configparser as ConfigParser
except ImportError:
    import ConfigParser
import os
import shutil
import subprocess
import sys
import time

# Config file section for this program:
CONFIG_SECTION = 'bib-update'
# Default configuration values:
TEMP_DIR = '/dev/shm/bib-update'
GIT_REPO = 'git@github.com:cemac/bibsensor-updates.git'
UPDATE_FILE = 'update.sh'
UPDATE_INTERVAL = 3600

def check_args(sys_args):
    """
    Check the program arguments, and return path to config file, if valid
    """
    # Check number of arguments, if none, return:
    if len(sys_args) < 2:
        return
    # Config file path is first argument. Try to open it and if succeeds,
    # return the patht to the config file, else return None:
    try:
        with open(sys.argv[1], 'r') as config_fh:
            config_file = sys.argv[1]
    except:
        config_file = None
    # Return the path to the config file:
    return config_file

def get_config(config_file, config_section):
    """
    Get the configuration, from config file if available
    """
    # Init config object:
    config = {
        'temp_dir': TEMP_DIR,
        'git_repo': GIT_REPO,
        'update_file': UPDATE_FILE,
        'update_interval': UPDATE_INTERVAL
    }
    # If no config file, use default values:
    if not config_file:
        return config
    # Create ConfigParser:
    config_parser = ConfigParser.RawConfigParser()
    # Try to read config file:
    try:
        config_parser.read_file(open(config_file, 'r'))
    except AttributeError:
        config_parser.readfp(open(config_file, 'r'))
    # Get values from config file, use defaults if not available ...
    # Temp directory in to which repository will be cloned / from which updates
    # will be run:
    try:
        config['temp_dir'] = config_parser.get(config_section, 'TEMP_DIR')
    except:
        pass
    # Git repository containing updates which should be cloned:
    try:
        config['git_repo'] = config_parser.get(config_section, 'GIT_REPO')
    except:
        pass
    # File in the repository which should be run:
    try:
        config['update_file'] = config_parser.get(config_section, 'UPDATE_FILE')
    except:
        pass
    # Update frequency in seconds:
    try:
        config['update_interval'] = config_parser.getfloat(
            config_section, 'UPDATE_INTERVAL'
        )
    except:
        pass
    # Return the config:
    return config

def do_update(config):
    """
    Clone the updates repository and run the update command
    """
    # Get the configuration values:
    temp_dir = config['temp_dir']
    git_repo = config['git_repo']
    update_file = config['update_file']
    # If temporary does not exist, create it. If it does exist, remove it
    # then recreate:
    if not os.path.exists(temp_dir):
        os.makedirs(temp_dir)
    else:
        shutil.rmtree(temp_dir)
        os.makedirs(temp_dir)
    # Clone the repository:
    cmd_status = subprocess.call(['git', 'clone', git_repo, 'updates'],
                                 cwd=temp_dir, stdout=subprocess.DEVNULL,
                                 stderr=subprocess.DEVNULL)
    # Full path to updates file:
    update_path = os.sep.join([temp_dir, 'updates', update_file])
    # If the update file exists:
    if os.path.exists(update_path):
        # Make sure the file is executable:
        os.chmod(update_path, 0o700)
        # Run the update:
        cmd_status = subprocess.call([update_path])
    # Tidy up:
    shutil.rmtree(temp_dir)

def main():
    """
    Main program function
    """
    # Check arguments:
    config_file = check_args(sys.argv)
    # Display a message:
    if config_file:
        err_msg = 'Using config file: {0}\n'.format(config_file)
    else:
        err_msg = 'Config file not found. Using default values\n'
    sys.stdout.write(err_msg)
    # Get the configuration values:
    config = get_config(config_file, CONFIG_SECTION)
    update_interval = config['update_interval']
    # Loop until killed:
    while True:
        # Try to update:
        try:
            do_update(config)
        # Or wait and try again:
        except Exception as ex_msg:
            sys.stdout.write('{0}\n'.format(ex_msg))
            pass
        # Sleep for specified interval:
        time.sleep(update_interval)

if __name__ == '__main__':
    main()
